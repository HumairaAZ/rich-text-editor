{"version":3,"sources":["components/RichTextEditorToolbar.js","utils/ImageComponent.js","utils/TableComponent.js","components/RichTextEditor.js","index.js"],"names":["RichTextEditorToolbar","_ref","onBold","onItalic","onUnderline","onImage","onCode","onTable","_jsx","AppBar","position","children","_jsxs","Toolbar","Typography","variant","IconButton","color","onClick","FormatBold","FormatItalic","FormatUnderlined","Image","Code","TableChart","ImageComponent","block","contentState","src","getEntity","getEntityAt","getData","contentEditable","style","resize","overflow","alt","width","TableComponent","table","rows","split","map","row","slice","border","borderCollapse","rowIndex","cell","cellIndex","padding","trim","blockRenderMap","Map","element","wrapper","extendedBlockRenderMap","DefaultDraftBlockRenderMap","merge","mediaBlockRenderer","getType","type","get","component","editable","RichTextEditor","editorState","setEditorState","useState","EditorState","createEmpty","toggleInlineStyle","RichUtils","onBoldClick","onItalicClick","onUnderlineClick","onImageClick","url","prompt","entityKey","getCurrentContent","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","onCodeClick","onTableClick","columns","Array","from","length","repeat","join","className","moveFocusToEnd","Editor","handleKeyCommand","command","newState","blockRendererFn","placeholder","onChange","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d09e2e10.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport { FormatBold, FormatItalic, FormatUnderlined, Image, Code, TableChart } from '@material-ui/icons';\n\nconst RichTextEditorToolbar = ({ onBold, onItalic, onUnderline, onImage, onCode, onTable }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\">Rich Text Editor</Typography>\n      <IconButton color=\"inherit\" onClick={onBold} aria-label=\"Bold\">\n        <FormatBold />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onItalic} aria-label=\"Italic\">\n        <FormatItalic />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onUnderline} aria-label=\"Underline\">\n        <FormatUnderlined />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onImage} aria-label=\"Insert Image\">\n        <Image />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onCode} aria-label=\"Code\">\n        <Code />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onTable} aria-label=\"Insert Table\">\n        <TableChart />\n      </IconButton>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default RichTextEditorToolbar;\n","import React from 'react';\n\nconst ImageComponent = ({ block, contentState }) => {\n  const { src } = contentState.getEntity(block.getEntityAt(0)).getData();\n  return (\n    <div contentEditable={false} style={{ resize: 'both', overflow: 'auto' }}>\n      <img src={src} alt=\"\" style={{ width: '100%' }} />\n    </div>\n  );\n};\n\nexport default ImageComponent;\n","import React from 'react';\n\nconst TableComponent = ({ block, contentState }) => {\n  const { table } = contentState.getEntity(block.getEntityAt(0)).getData();\n  const rows = table.split('\\n').map(row => row.split('|').slice(1, -1));\n\n  return (\n    <table style={{ border: '1px solid black', borderCollapse: 'collapse' }}>\n      <tbody>\n        {rows.map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {row.map((cell, cellIndex) => (\n              <td key={cellIndex} style={{ border: '1px solid black', padding: '8px' }}>{cell.trim()}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default TableComponent;\n","import React, { useState } from 'react';\nimport { Editor, EditorState, RichUtils, AtomicBlockUtils, DefaultDraftBlockRenderMap } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport RichTextEditorToolbar from './RichTextEditorToolbar';\nimport ImageComponent from '../utils/ImageComponent';\nimport TableComponent from '../utils/TableComponent';\nimport { Map } from 'immutable';\nimport './RichTextEditor.css';\n\nconst blockRenderMap = Map({\n  'atomic': {\n    element: 'div',\n    wrapper: <div />,\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\nconst mediaBlockRenderer = (block) => {\n  if (block.getType() === 'atomic') {\n    const type = block.getData().get('type');\n    if (type === 'image') {\n      return {\n        component: ImageComponent,\n        editable: false,\n      };\n    }\n    if (type === 'table') {\n      return {\n        component: TableComponent,\n        editable: false,\n      };\n    }\n  }\n  return null;\n};\n\nconst RichTextEditor = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      setEditorState(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  const toggleInlineStyle = (style) => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  const onBoldClick = () => toggleInlineStyle('BOLD');\n  const onItalicClick = () => toggleInlineStyle('ITALIC');\n  const onUnderlineClick = () => toggleInlineStyle('UNDERLINE');\n\n  const onImageClick = () => {\n    const url = prompt('Enter image URL');\n    if (url) {\n      const contentState = editorState.getCurrentContent();\n      const contentStateWithEntity = contentState.createEntity('IMAGE', 'IMMUTABLE', { src: url });\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n      setEditorState(AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' '));\n    }\n  };\n\n  const onCodeClick = () => toggleInlineStyle('CODE');\n\n  const onTableClick = () => {\n    const rows = prompt('Enter number of rows');\n    const columns = prompt('Enter number of columns');\n    if (rows && columns) {\n      const table = Array.from({ length: rows }, () => '| ' + '   | '.repeat(columns)).join('\\n');\n      const contentState = editorState.getCurrentContent();\n      const contentStateWithEntity = contentState.createEntity('TABLE', 'IMMUTABLE', { table });\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n      setEditorState(AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' '));\n    }\n  };\n\n  return (\n    <div>\n      <RichTextEditorToolbar\n        onBold={onBoldClick}\n        onItalic={onItalicClick}\n        onUnderline={onUnderlineClick}\n        onImage={onImageClick}\n        onCode={onCodeClick}\n        onTable={onTableClick}\n      />\n      <div className=\"editor-container\" onClick={() => setEditorState(EditorState.moveFocusToEnd(editorState))}>\n        <Editor\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          blockRenderMap={extendedBlockRenderMap}\n          blockRendererFn={mediaBlockRenderer}\n          placeholder=\"Start typing...\"\n          onChange={setEditorState}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default RichTextEditor;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RichTextEditor from './components/RichTextEditor';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RichTextEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}