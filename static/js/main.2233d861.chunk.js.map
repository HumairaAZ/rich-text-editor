{"version":3,"sources":["components/RichTextEditorToolbar.js","utils/ImageComponent.js","components/RichTextEditor.js","index.js"],"names":["RichTextEditorToolbar","_ref","onBold","onItalic","onUnderline","onImage","onCode","onUndo","onRedo","_jsx","AppBar","position","children","_jsxs","Toolbar","Typography","variant","IconButton","color","onClick","FormatBold","FormatItalic","FormatUnderlined","Image","Code","Undo","Redo","ImageComponent","block","contentState","src","getEntity","getEntityAt","getData","imageRef","useRef","isDragging","setIsDragging","useState","contentEditable","style","resize","overflow","display","onMouseMove","e","current","width","concat","clientX","getBoundingClientRect","left","onMouseUp","alt","ref","onMouseDown","blockRenderMap","Map","element","wrapper","extendedBlockRenderMap","DefaultDraftBlockRenderMap","merge","mediaBlockRenderer","getType","get","component","editable","RichTextEditor","editorState","setEditorState","EditorState","createEmpty","toggleInlineStyle","RichUtils","onBoldClick","onItalicClick","onUnderlineClick","onImageClick","url","prompt","entityKey","getCurrentContent","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","onCodeClick","undo","redo","className","moveFocusToEnd","Editor","handleKeyCommand","command","newState","blockRendererFn","placeholder","onChange","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2233d861.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport { FormatBold, FormatItalic, FormatUnderlined, Image, Code, Undo, Redo } from '@material-ui/icons';\n\nconst RichTextEditorToolbar = ({ onBold, onItalic, onUnderline, onImage, onCode, onUndo, onRedo }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\">Rich Text Editor</Typography>\n      <IconButton color=\"inherit\" onClick={onBold} aria-label=\"Bold\">\n        <FormatBold />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onItalic} aria-label=\"Italic\">\n        <FormatItalic />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onUnderline} aria-label=\"Underline\">\n        <FormatUnderlined />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onImage} aria-label=\"Insert Image\">\n        <Image />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onCode} aria-label=\"Code\">\n        <Code />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onUndo} aria-label=\"Undo\">\n        <Undo />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onRedo} aria-label=\"Redo\">\n        <Redo />\n      </IconButton>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default RichTextEditorToolbar;\n","import React, { useRef, useState } from 'react';\n\nconst ImageComponent = ({ block, contentState }) => {\n  const { src } = contentState.getEntity(block.getEntityAt(0)).getData();\n  const imageRef = useRef(null);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const onMouseDown = () => setIsDragging(true);\n  const onMouseUp = () => setIsDragging(false);\n  const onMouseMove = (e) => {\n    if (isDragging) {\n      imageRef.current.style.width = `${e.clientX - imageRef.current.getBoundingClientRect().left}px`;\n    }\n  };\n\n  return (\n    <div \n      contentEditable={false}\n      style={{ resize: 'both', overflow: 'auto', display: 'inline-block' }}\n      onMouseMove={onMouseMove}\n      onMouseUp={onMouseUp}\n    >\n      <img \n        src={src} \n        alt=\"\" \n        style={{ width: '100%' }} \n        ref={imageRef} \n        onMouseDown={onMouseDown} \n      />\n    </div>\n  );\n};\n\nexport default ImageComponent;\n","import React, { useState } from 'react';\nimport { Editor, EditorState, RichUtils, AtomicBlockUtils, DefaultDraftBlockRenderMap } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport RichTextEditorToolbar from './RichTextEditorToolbar';\nimport ImageComponent from '../utils/ImageComponent';\nimport { Map } from 'immutable';\nimport './RichTextEditor.css';\n\nconst blockRenderMap = Map({\n  'atomic': {\n    element: 'div',\n    wrapper: <div />,\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\nconst mediaBlockRenderer = (block) => {\n  if (block.getType() === 'atomic') {\n    const type = block.getData().get('type');\n    if (type === 'image') {\n      return {\n        component: ImageComponent,\n        editable: false,\n      };\n    }\n  }\n  return null;\n};\n\nconst RichTextEditor = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      setEditorState(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  const toggleInlineStyle = (style) => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  const onBoldClick = () => toggleInlineStyle('BOLD');\n  const onItalicClick = () => toggleInlineStyle('ITALIC');\n  const onUnderlineClick = () => toggleInlineStyle('UNDERLINE');\n\n  const onImageClick = () => {\n    const url = prompt('Enter image URL');\n    if (url) {\n      const contentState = editorState.getCurrentContent();\n      const contentStateWithEntity = contentState.createEntity('IMAGE', 'IMMUTABLE', { src: url });\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n      setEditorState(AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' '));\n    }\n  };\n\n  const onCodeClick = () => toggleInlineStyle('CODE');\n\n  // Undo/Redo Functions\n  const undo = () => setEditorState(EditorState.undo(editorState));\n  const redo = () => setEditorState(EditorState.redo(editorState));\n\n  return (\n    <div>\n      <RichTextEditorToolbar\n        onBold={onBoldClick}\n        onItalic={onItalicClick}\n        onUnderline={onUnderlineClick}\n        onImage={onImageClick}\n        onCode={onCodeClick}\n        onUndo={undo}\n        onRedo={redo}\n      />\n      <div className=\"editor-container\" onClick={() => setEditorState(EditorState.moveFocusToEnd(editorState))}>\n        <Editor\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          blockRenderMap={extendedBlockRenderMap}\n          blockRendererFn={mediaBlockRenderer}\n          placeholder=\"Start typing...\"\n          onChange={setEditorState}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default RichTextEditor;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RichTextEditor from './components/RichTextEditor';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RichTextEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}