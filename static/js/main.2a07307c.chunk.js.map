{"version":3,"sources":["components/RichTextEditorToolbar.js","components/RichTextEditor.js","index.js"],"names":["CustomIconButton","styled","IconButton","transition","transform","backgroundColor","RichTextEditorToolbar","_ref","onBold","onItalic","onUnderline","onStrikethrough","onBulletList","onNumberList","onUndo","onRedo","_jsx","AppBar","position","color","children","_jsxs","Toolbar","Typography","variant","sx","flexGrow","onClick","FormatBoldIcon","FormatItalicIcon","FormatUnderlinedIcon","StrikethroughSIcon","FormatListBulletedIcon","FormatListNumberedIcon","UndoIcon","RedoIcon","StyledPaper","Paper","padding","marginTop","minHeight","cursor","border","boxShadow","blockRenderMap","DefaultDraftBlockRenderMap","saveContent","debounce","content","localStorage","setItem","JSON","stringify","RichTextEditor","editorState","setEditorState","useState","savedContent","getItem","EditorState","createWithContent","convertFromRaw","parse","createEmpty","useEffect","contentState","getCurrentContent","convertToRaw","toggleInlineStyle","style","RichUtils","toggleBlockType","blockType","Container","maxWidth","onBoldClick","onItalicClick","onUnderlineClick","onStrikethroughClick","onBulletListClick","onNumberListClick","undo","redo","moveFocusToEnd","Editor","handleKeyCommand","command","newState","placeholder","onChange","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a07307c.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport StrikethroughSIcon from '@mui/icons-material/StrikethroughS';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\nimport UndoIcon from '@mui/icons-material/Undo';\nimport RedoIcon from '@mui/icons-material/Redo';\nimport { styled } from '@mui/system';\n\nconst CustomIconButton = styled(IconButton)({\n  transition: 'transform 0.3s ease-in-out',\n  '&:hover': {\n    transform: 'scale(1.2)',\n    backgroundColor: 'rgba(0, 0, 0, 0.1)',\n  },\n});\n\nconst RichTextEditorToolbar = ({ onBold, onItalic, onUnderline, onStrikethrough, onBulletList, onNumberList, onUndo, onRedo }) => (\n  <AppBar position=\"static\" color=\"primary\">\n    <Toolbar>\n      <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>Rich Text Editor</Typography>\n      <CustomIconButton color=\"inherit\" onClick={onBold} aria-label=\"Bold\">\n        <FormatBoldIcon />\n      </CustomIconButton>\n      <CustomIconButton color=\"inherit\" onClick={onItalic} aria-label=\"Italic\">\n        <FormatItalicIcon />\n      </CustomIconButton>\n      <CustomIconButton color=\"inherit\" onClick={onUnderline} aria-label=\"Underline\">\n        <FormatUnderlinedIcon />\n      </CustomIconButton>\n      <CustomIconButton color=\"inherit\" onClick={onStrikethrough} aria-label=\"Strikethrough\">\n        <StrikethroughSIcon />\n      </CustomIconButton>\n      <CustomIconButton color=\"inherit\" onClick={onBulletList} aria-label=\"Bullet List\">\n        <FormatListBulletedIcon />\n      </CustomIconButton>\n      <CustomIconButton color=\"inherit\" onClick={onNumberList} aria-label=\"Number List\">\n        <FormatListNumberedIcon />\n      </CustomIconButton>\n      <CustomIconButton color=\"inherit\" onClick={onUndo} aria-label=\"Undo\">\n        <UndoIcon />\n      </CustomIconButton>\n      <CustomIconButton color=\"inherit\" onClick={onRedo} aria-label=\"Redo\">\n        <RedoIcon />\n      </CustomIconButton>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default RichTextEditorToolbar;\n","import React, { useState, useEffect } from 'react';\nimport { Editor, EditorState, RichUtils, DefaultDraftBlockRenderMap, convertToRaw, convertFromRaw } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport RichTextEditorToolbar from './RichTextEditorToolbar';\nimport { Container, Paper } from '@mui/material';\nimport { styled } from '@mui/system';\nimport { debounce } from 'lodash';\n\nconst StyledPaper = styled(Paper)({\n  padding: '16px',\n  marginTop: '16px',\n  minHeight: '200px',\n  cursor: 'text',\n  transition: 'border 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  '&:hover': {\n    border: '1px solid #3f51b5',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n  },\n});\n\nconst blockRenderMap = DefaultDraftBlockRenderMap;\n\nconst saveContent = debounce((content) => {\n  localStorage.setItem('content', JSON.stringify(content));\n}, 1000);\n\nconst RichTextEditor = () => {\n  const [editorState, setEditorState] = useState(() => {\n    const savedContent = localStorage.getItem('content');\n    return savedContent ? EditorState.createWithContent(convertFromRaw(JSON.parse(savedContent))) : EditorState.createEmpty();\n  });\n\n  useEffect(() => {\n    const contentState = editorState.getCurrentContent();\n    saveContent(convertToRaw(contentState));\n  }, [editorState]);\n\n  const handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      setEditorState(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  const toggleInlineStyle = (style) => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  const onBoldClick = () => toggleInlineStyle('BOLD');\n  const onItalicClick = () => toggleInlineStyle('ITALIC');\n  const onUnderlineClick = () => toggleInlineStyle('UNDERLINE');\n  const onStrikethroughClick = () => toggleInlineStyle('STRIKETHROUGH');\n  const onBulletListClick = () => toggleBlockType('unordered-list-item');\n  const onNumberListClick = () => toggleBlockType('ordered-list-item');\n\n  const undo = () => setEditorState(EditorState.undo(editorState));\n  const redo = () => setEditorState(EditorState.redo(editorState));\n\n  const toggleBlockType = (blockType) => {\n    setEditorState(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <RichTextEditorToolbar\n        onBold={onBoldClick}\n        onItalic={onItalicClick}\n        onUnderline={onUnderlineClick}\n        onStrikethrough={onStrikethroughClick}\n        onBulletList={onBulletListClick}\n        onNumberList={onNumberListClick}\n        onUndo={undo}\n        onRedo={redo}\n      />\n      <StyledPaper onClick={() => setEditorState(EditorState.moveFocusToEnd(editorState))}>\n        <Editor\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          blockRenderMap={blockRenderMap}\n          placeholder=\"Start typing...\"\n          onChange={setEditorState}\n        />\n      </StyledPaper>\n    </Container>\n  );\n};\n\nexport default RichTextEditor;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RichTextEditor from './components/RichTextEditor';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RichTextEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}