{"version":3,"sources":["components/RichTextEditorToolbar.js","utils/ImageComponent.js","utils/TableComponent.js","components/RichTextEditor.js","index.js"],"names":["RichTextEditorToolbar","_ref","onBold","onItalic","onUnderline","onImage","onCode","onTable","onUndo","onRedo","onBlockTypeChange","onFontSizeChange","_jsx","AppBar","position","children","_jsxs","Toolbar","Typography","variant","IconButton","color","onClick","FormatBold","FormatItalic","FormatUnderlined","Image","Code","TableChart","Undo","Redo","Select","defaultValue","onChange","e","target","value","displayEmpty","inputProps","MenuItem","ImageComponent","block","contentState","src","getEntity","getEntityAt","getData","imageRef","useRef","isDragging","setIsDragging","useState","contentEditable","style","resize","overflow","display","onMouseMove","current","width","concat","clientX","getBoundingClientRect","left","onMouseUp","alt","ref","onMouseDown","TableComponent","table","rows","split","map","row","slice","border","borderCollapse","rowIndex","cell","cellIndex","padding","trim","styleMap","fontSize","blockRenderMap","Map","element","wrapper","extendedBlockRenderMap","DefaultDraftBlockRenderMap","merge","mediaBlockRenderer","getType","type","get","component","editable","RichTextEditor","editorState","setEditorState","EditorState","createEmpty","toggleInlineStyle","RichUtils","onBoldClick","onItalicClick","onUnderlineClick","onImageClick","url","prompt","entityKey","getCurrentContent","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","onCodeClick","onTableClick","columns","Array","from","length","repeat","join","undo","redo","blockType","toggleBlockType","selection","getSelection","nextContentState","Object","keys","reduce","font","Modifier","removeInlineStyle","nextEditorState","push","currentStyle","getCurrentInlineStyle","isCollapsed","state","has","className","moveFocusToEnd","Editor","handleKeyCommand","command","newState","blockRendererFn","customStyleMap","placeholder","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07617a4b.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography, Select, MenuItem } from '@material-ui/core';\nimport { FormatBold, FormatItalic, FormatUnderlined, Image, Code, TableChart, Undo, Redo } from '@material-ui/icons';\n\nconst RichTextEditorToolbar = ({ onBold, onItalic, onUnderline, onImage, onCode, onTable, onUndo, onRedo, onBlockTypeChange, onFontSizeChange }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\">Rich Text Editor</Typography>\n      <IconButton color=\"inherit\" onClick={onBold} aria-label=\"Bold\">\n        <FormatBold />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onItalic} aria-label=\"Italic\">\n        <FormatItalic />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onUnderline} aria-label=\"Underline\">\n        <FormatUnderlined />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onImage} aria-label=\"Insert Image\">\n        <Image />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onCode} aria-label=\"Code\">\n        <Code />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onTable} aria-label=\"Insert Table\">\n        <TableChart />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onUndo} aria-label=\"Undo\">\n        <Undo />\n      </IconButton>\n      <IconButton color=\"inherit\" onClick={onRedo} aria-label=\"Redo\">\n        <Redo />\n      </IconButton>\n      <Select\n        defaultValue=\"\"\n        onChange={(e) => onBlockTypeChange(e.target.value)}\n        displayEmpty\n        inputProps={{ 'aria-label': 'Block Type' }}\n      >\n        <MenuItem value=\"\">Block Type</MenuItem>\n        <MenuItem value=\"header-one\">Header One</MenuItem>\n        <MenuItem value=\"header-two\">Header Two</MenuItem>\n        <MenuItem value=\"unstyled\">Normal</MenuItem>\n      </Select>\n      <Select\n        defaultValue=\"\"\n        onChange={(e) => onFontSizeChange(e.target.value)}\n        displayEmpty\n        inputProps={{ 'aria-label': 'Font Size' }}\n      >\n        <MenuItem value=\"\">Font Size</MenuItem>\n        <MenuItem value=\"FONT_SIZE_12\">12px</MenuItem>\n        <MenuItem value=\"FONT_SIZE_16\">16px</MenuItem>\n        <MenuItem value=\"FONT_SIZE_20\">20px</MenuItem>\n      </Select>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default RichTextEditorToolbar;\n","import React, { useRef, useState } from 'react';\n\nconst ImageComponent = ({ block, contentState }) => {\n  const { src } = contentState.getEntity(block.getEntityAt(0)).getData();\n  const imageRef = useRef(null);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const onMouseDown = () => setIsDragging(true);\n  const onMouseUp = () => setIsDragging(false);\n  const onMouseMove = (e) => {\n    if (isDragging) {\n      imageRef.current.style.width = `${e.clientX - imageRef.current.getBoundingClientRect().left}px`;\n    }\n  };\n\n  return (\n    <div \n      contentEditable={false}\n      style={{ resize: 'both', overflow: 'auto', display: 'inline-block' }}\n      onMouseMove={onMouseMove}\n      onMouseUp={onMouseUp}\n    >\n      <img \n        src={src} \n        alt=\"\" \n        style={{ width: '100%' }} \n        ref={imageRef} \n        onMouseDown={onMouseDown} \n      />\n    </div>\n  );\n};\n\nexport default ImageComponent;\n","import React from 'react';\n\nconst TableComponent = ({ block, contentState }) => {\n  const { table } = contentState.getEntity(block.getEntityAt(0)).getData();\n  const rows = table.split('\\n').map(row => row.split('|').slice(1, -1));\n\n  return (\n    <table style={{ border: '1px solid black', borderCollapse: 'collapse', width: '100%' }}>\n      <tbody>\n        {rows.map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {row.map((cell, cellIndex) => (\n              <td key={cellIndex} style={{ border: '1px solid black', padding: '8px' }}>{cell.trim()}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default TableComponent;\n","import React, { useState } from 'react';\nimport { Editor, EditorState, RichUtils, AtomicBlockUtils, DefaultDraftBlockRenderMap, Modifier } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport RichTextEditorToolbar from './RichTextEditorToolbar';\nimport ImageComponent from '../utils/ImageComponent';\nimport TableComponent from '../utils/TableComponent';\nimport { Map } from 'immutable';\nimport './RichTextEditor.css';\n\nconst styleMap = {\n  'FONT_SIZE_12': { fontSize: '12px' },\n  'FONT_SIZE_16': { fontSize: '16px' },\n  'FONT_SIZE_20': { fontSize: '20px' },\n};\n\nconst blockRenderMap = Map({\n  'atomic': {\n    element: 'div',\n    wrapper: <div />,\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\nconst mediaBlockRenderer = (block) => {\n  if (block.getType() === 'atomic') {\n    const type = block.getData().get('type');\n    if (type === 'image') {\n      return {\n        component: ImageComponent,\n        editable: false,\n      };\n    }\n    if (type === 'table') {\n      return {\n        component: TableComponent,\n        editable: false,\n      };\n    }\n  }\n  return null;\n};\n\nconst RichTextEditor = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      setEditorState(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  const toggleInlineStyle = (style) => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  const onBoldClick = () => toggleInlineStyle('BOLD');\n  const onItalicClick = () => toggleInlineStyle('ITALIC');\n  const onUnderlineClick = () => toggleInlineStyle('UNDERLINE');\n\n  const onImageClick = () => {\n    const url = prompt('Enter image URL');\n    if (url) {\n      const contentState = editorState.getCurrentContent();\n      const contentStateWithEntity = contentState.createEntity('IMAGE', 'IMMUTABLE', { src: url });\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n      setEditorState(AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' '));\n    }\n  };\n\n  const onCodeClick = () => toggleInlineStyle('CODE');\n\n  const onTableClick = () => {\n    const rows = prompt('Enter number of rows');\n    const columns = prompt('Enter number of columns');\n    if (rows && columns) {\n      const table = Array.from({ length: rows }, () => '| ' + '   | '.repeat(columns)).join('\\n');\n      const contentState = editorState.getCurrentContent();\n      const contentStateWithEntity = contentState.createEntity('TABLE', 'IMMUTABLE', { table });\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n      setEditorState(AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' '));\n    }\n  };\n\n  const undo = () => setEditorState(EditorState.undo(editorState));\n  const redo = () => setEditorState(EditorState.redo(editorState));\n\n  const toggleBlockType = (blockType) => {\n    setEditorState(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleFontSize = (fontSize) => {\n    const selection = editorState.getSelection();\n    const nextContentState = Object.keys(styleMap)\n      .reduce((contentState, font) => {\n        return Modifier.removeInlineStyle(contentState, selection, font);\n      }, editorState.getCurrentContent());\n\n    let nextEditorState = EditorState.push(\n      editorState,\n      nextContentState,\n      'change-inline-style'\n    );\n\n    const currentStyle = editorState.getCurrentInlineStyle();\n\n    if (selection.isCollapsed()) {\n      nextEditorState = currentStyle.reduce((state, style) => {\n        return RichUtils.toggleInlineStyle(state, style);\n      }, nextEditorState);\n    }\n\n    if (!currentStyle.has(fontSize)) {\n      nextEditorState = RichUtils.toggleInlineStyle(\n        nextEditorState,\n        fontSize\n      );\n    }\n\n    setEditorState(nextEditorState);\n  };\n\n  return (\n    <div>\n      <RichTextEditorToolbar\n        onBold={onBoldClick}\n        onItalic={onItalicClick}\n        onUnderline={onUnderlineClick}\n        onImage={onImageClick}\n        onCode={onCodeClick}\n        onTable={onTableClick}\n        onUndo={undo}\n        onRedo={redo}\n        onBlockTypeChange={toggleBlockType}\n        onFontSizeChange={toggleFontSize}\n      />\n      <div className=\"editor-container\" onClick={() => setEditorState(EditorState.moveFocusToEnd(editorState))}>\n        <Editor\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          blockRenderMap={extendedBlockRenderMap}\n          blockRendererFn={mediaBlockRenderer}\n          customStyleMap={styleMap}\n          placeholder=\"Start typing...\"\n          onChange={setEditorState}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default RichTextEditor;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RichTextEditor from './components/RichTextEditor';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RichTextEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}